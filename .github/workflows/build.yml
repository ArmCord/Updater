name: Build and release
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: '1.6.2' # default is 'stable'
      - name: Build the project on Linux
        run: nim c -d:ssl --outdir:build src/Updater.nim
      - name: Build the project on Windows
        run: sudo apt install mingw-w64 && nim c --os:Windows -d:mingw --outdir:build --cpu:amd64 -d:ssl src/Updater.nim
      - uses: actions/checkout@v2
      - id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Create Release
        uses: actions/github-script@v2
        env:
          SHORT: steps.vars.outputs.sha_short
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);
            const { SHORT } = process.env
            const fs = require('fs').promises;
            const path = require("path")
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });
            var __dirname = path.resolve();
            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: SHORT,
              release_name: `Release ${SHORT}`,
              draft: true,
              target_commitish: sha
            });

            console.log('created release', { release });
        
            for (let file of await fs.readdir(__dirname + 'build/')) {
              // do whatever filtering you want here, I'm just uploading all the files
              console.log('uploading', file);

              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./${file}`)
              });            
            }
      - run: |
          curl --request PATCH \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/${{ github.repository }}/releases/${{steps.create_release.outputs.id}} \
          -d '{"draft":false}'